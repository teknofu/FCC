rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }

    function isParent() {
      return isAuthenticated() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'parent';
    }

    function isChild() {
      return isAuthenticated() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'child';
    }

    function isParentOf(userId) {
      let userData = get(/databases/$(database)/documents/users/$(userId)).data;
      return isParent() && userData.parentUid == request.auth.uid;
    }

    // Users collection
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow write, delete: if isAuthenticated() && (
        request.auth.uid == userId || 
        (isParent() && get(/databases/$(database)/documents/users/$(userId)).data.parentUid == request.auth.uid)
      );
    }

    // Allowances collection
    match /allowances/{allowanceId} {
      allow read: if isAuthenticated() && (
        isParent() || 
        (isChild() && resource.data.childId == request.auth.uid)
      );
      allow write: if isAuthenticated() && isParent();
    }

    // Earnings collection
    match /earnings/{earningId} {
      allow read: if isAuthenticated() && (
        isParent() || 
        (isChild() && resource.data.childId == request.auth.uid)
      );
      allow create, update: if isAuthenticated() && isParent();
      allow delete: if false; // Never allow deletion of earnings
    }

    // Chores collection
    match /chores/{choreId} {
      allow read: if isAuthenticated();
      allow write, delete: if isAuthenticated() && (
        (isParent() && (
          // Allow if parent is creating a new chore
          !exists(/databases/$(database)/documents/chores/$(choreId)) ||
          // Allow if parent has access or is the creator
          request.auth.uid in resource.data.parentAccess ||
          request.auth.uid == resource.data.createdBy
        )) || 
        request.auth.uid == resource.data.assignedTo
      );
    }

    // Completed chores collection
    match /completedChores/{historyId} {
      allow read: if isAuthenticated();
      allow write, delete: if isAuthenticated() && (
        isParent() || 
        request.auth.uid == resource.data.userId
      );
    }

    // Family collection
    match /family/{familyId} {
      allow read, write: if isAuthenticated() && isParent();
    }

    // Rewards collection
    match /rewards/{rewardId} {
      allow read: if isAuthenticated() && (
        isParent() || 
        (isChild() && resource.data.childId == request.auth.uid)
      );
      
      allow create: if isAuthenticated() && isParent() && 
        request.resource.data.childId != null;
      
      allow delete: if isAuthenticated() && isParent();
    }

    // Payment Schedules collection
    match /paymentSchedules/{scheduleId} {
      allow read: if isAuthenticated() && (
        isParent() || 
        (isChild() && resource.data.childId == request.auth.uid)
      );
      allow write: if isAuthenticated() && isParent();
    }

    // Payments collection
    match /payments/{paymentId} {
      allow read: if isAuthenticated() && (
        isParent() || 
        (isChild() && resource.data.childId == request.auth.uid)
      );
      allow create, update: if isAuthenticated() && isParent();
      allow delete: if false; // Never allow deletion of payments
    }

    // Allow parent to delete all child-related data
    match /{collection}/{document=**} {
      allow delete: if isAuthenticated() && isParent() && (
        collection == "users" || 
        collection == "chores" || 
        collection == "completedChores"
      );
    }
  }
}
