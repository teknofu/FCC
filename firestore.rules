rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }

    function isParent() {
      return isAuthenticated() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'parent';
    }

    function isChild() {
      return isAuthenticated() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'child';
    }

    function isAssignedToUser(choreData) {
      return choreData.assignedTo == request.auth.uid;
    }

    function isChoreCreator(choreData) {
      return choreData.createdBy == request.auth.uid;
    }

    // Users collection
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow write: if request.auth.uid == userId;
    }

    // Chores collection
    match /chores/{choreId} {
      allow read: if isAuthenticated() && (
        isParent() || 
        (isChild() && isAssignedToUser(resource.data))
      );
      
      allow create: if isAuthenticated() && isParent();
      
      allow update: if isAuthenticated() && (
        isParent() || 
        (isChild() && isAssignedToUser(resource.data) && 
         request.resource.data.diff(resource.data).affectedKeys()
         .hasOnly(['status', 'completedAt', 'updatedAt']))
      );
      
      allow delete: if isAuthenticated() && isParent() && isChoreCreator(resource.data);
    }

    // Family collection
    match /family/{familyId} {
      allow read, write: if isAuthenticated() && isParent();
    }

    // Rewards collection
    match /rewards/{rewardId} {
      allow read: if isAuthenticated();
      allow write: if isParent();
    }
  }
}
